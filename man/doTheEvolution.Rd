% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/doTheEvolution.R
\name{doTheEvolution}
\alias{doTheEvolution}
\title{Working horse of the ecr package.}
\usage{
doTheEvolution(task, control)
}
\arguments{
\item{task}{[\code{ecr_optimization_task}]\cr
Optimization task. If a \code{smoof_function} is passed it is automatically
converted into a task.}

\item{control}{[\code{ecr_control}]\cr
ECR control object generated via \code{\link{setupECRControl}}.}
}
\value{
[\code{ecrResult}]
  Object of type \code{ecr_result} containing a list:
  \itemize{
   \item{objective.fun \code{smoof_function}}{Objective function.}
   \item{control \code{ect_control}}{Control object.}
   \item{best.param \code{numeric}}{Best parameter combination.}
   \item{best.value \code{numeric(1)}}{Best reached value.}
   \item{opt.path \code{optPath}}{Optimization path.}
   \item{population.storage \code{list}}{List of populations.}
   \item{message \code{character(1)}}{Message explaining the reason for termination.}
  }
}
\description{
Takes a function and searches for a global optimum with an evolutionary approach.
}
\examples{
library(smoof)
library(ParamHelpers)
library(ggplot2)

# We want to find the minimum of the function f(x) = x sin(2x) on the interval
# [0, 2pi]. The optimal value is about -5.5 for x = 5.54.
# First we wrap the function with the smoof package:
obj.fn = makeSingleObjectiveFunction(
  name = "My obj. function",
  fn = function(x) x * sin(2 * x),
  par.set = makeParamSet(makeNumericParam("x", lower = 0, upper = 2 * pi))
)

# We want to solve this with a (10 + 10) evolutionary strategy based on
# the floating point representation of the input vectors with the default
# operators: intermediate recombinator and Gaussian mutation
ctrl = setupECRControl(
  n.population = 10L,
  n.offspring = 10L,
  survival.strategy = "plus",
  representation = "float",
  stopping.conditions = setupStoppingConditions(max.iter = 100L)
)
# use the default operators for representation "float"
ctrl = setupEvolutionaryOperators(ctrl)

res = doTheEvolution(obj.fn, ctrl)
print(res)

# Now let us choose a (10, 10) strategy with intermediate recombination. Moreover,
# we want the "fittest" individual to surive each time and therefore set n.elite
# to 1.
ctrl = setupECRControl(
  n.population = 10L,
  n.offspring = 10L,
  survival.strategy = "comma",
  n.elite = 1L,
  representation = "float",
  stopping.conditions = setupStoppingConditions(max.iter = 100L)
)
ctrl = setupEvolutionaryOperators(ctrl)

res = doTheEvolution(obj.fn, ctrl)
print(res)

# Now let us tackle a two-dimensional problem
# Here we aim to find the global optimum of the 2D-Rastrigin function

set.seed(1234)

obj.fn = makeRastriginFunction(2L)
autoplot(obj.fn, show.optimum = TRUE)
# The global optimum is located in x1 = x2 = 0 with a function value of 0.

# We choose a (100 + 10) strategy with crossover recombination here and save
# each population. This way we can visualize the population later on.
ctrl = setupECRControl(
  n.population = 100L,
  n.offspring = 10L,
  survival.strategy = "plus",
  save.population.at = 0:100L,
  representation = "float",
  stopping.conditions = setupStoppingConditions(max.iter = 100L),
)
ctrl = setupEvolutionaryOperators(
 ctrl,
 parent.selector = makeRouletteWheelSelector(),
 recombinator = makeCrossoverRecombinator(),
 survival.selector = makeGreedySelector()
)
res = doTheEvolution(obj.fn, ctrl)
print(res)
\dontrun{
  autoplot(res, show.process = TRUE)
}
}
\seealso{
\code{\link{setupECRControl}}
}
\keyword{optimize}

