% Generated by roxygen2 (4.1.0): do not edit by hand
% Please edit documentation in R/doTheEvolution.R
\name{doTheEvolution}
\alias{doTheEvolution}
\title{Working horse of the ecr package.}
\usage{
doTheEvolution(objective.fun, control)
}
\arguments{
\item{objective.fun}{[\code{smoof_function}]\cr
Single objective target function of type \code{smoof_function}.}

\item{control}{[\code{setupECRControl}]\cr
Control object.}
}
\value{
[\code{ecrResult}]
  Object of type \code{ecr_result} containing a list:
  \itemize{
   \item{objective.fun \code{smoof_function}}{Objective function.}
   \item{control \code{ect_control}}{Control object.}
   \item{best.param \code{numeric}}{Best parameter combination.}
   \item{best.value \code{numeric(1)}}{Best reached value.}
   \item{opt.path \code{optPath}}{Optimization path.}
   \item{population.storage \code{list}}{List of populations.}
   \item{message \code{character(1)}}{Message explaining the reason for termination.}
  }
}
\description{
Takes a function and searches for a global optimum with an evolutionary approach.
}
\examples{
library(smoof)
library(ParamHelpers)
# We want to find the minimum of the function f(x) = x sin(2x) on the intervall
# [0, 2pi]. The optimal value is about -5.5 for x = 5.54.
# First we wrap the function with the smoof package:
obj.fn = makeSingleObjectiveFunction(
  name = "My obj. function",
  fn = function(x) x * sin(2 * x),
  par.set = makeParamSet(makeNumericParam("x", lower = 0, upper = 2 * pi))
)

# We want to solve this with a (10 + 10) evolutionary strategy based on
# the floating point representation of the input vectors with the default
# operators: intermediate recombinator and Gaussian mutation
ctrl = setupECRControl(
  n.population = 10L,
  n.offspring = 10L,
  survival.strategy = "plus",
  representation = "float",
  stopping.conditions = setupStoppingConditions(max.iter = 100L)
)
# use the default operators for representation "float"
ctrl = setupEvolutionaryOperators(ctrl)

res = doTheEvolution(obj.fn, ctrl)
print(res)

# Now let us choose a (10, 10) strategy with crossover recombination. Moreover,
# we want the "fittest" individual to surive each time and therefore set elite.size
# to 1.
ctrl = setupECRControl(
  n.population = 10L,
  n.offspring = 10L,
  survival.strategy = "comma",
  n.elite = 1L,
  representation = "float",
  stopping.conditions = setupStoppingConditions(max.iter = 100L)
)
ctrl = setupEvolutionaryOperators(
  ctrl,
  recombinator = makeCrossoverRecombinator()
)

res = doTheEvolution(obj.fn, ctrl)
print(res)
}
\seealso{
\code{\link{setupECRControl}}
}

